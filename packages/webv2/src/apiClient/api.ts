/* tslint:disable */
/* eslint-disable */
/**
 * eKYC API
 * An API for eKYC prototyping
 *
 * The version of the OpenAPI document: v2
 * Contact: opensource-codeofconduct@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CompareDocumentWithSelfie
 */
export interface CompareDocumentWithSelfie {
    /**
     * 
     * @type {boolean}
     * @memberof CompareDocumentWithSelfie
     */
    'isSimilar'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof CompareDocumentWithSelfie
     */
    'similarity'?: number;
}
/**
 * 
 * @export
 * @interface CreateDataRequestResponse
 */
export interface CreateDataRequestResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateDataRequestResponse
     */
    'requestId'?: string | null;
}
/**
 * 
 * @export
 * @interface GetFacesResponse
 */
export interface GetFacesResponse {
    /**
     * 
     * @type {string}
     * @memberof GetFacesResponse
     */
    'data'?: string | null;
}
/**
 * 
 * @export
 * @interface HistoryItems
 */
export interface HistoryItems {
    /**
     * 
     * @type {string}
     * @memberof HistoryItems
     */
    'time'?: string;
    /**
     * 
     * @type {string}
     * @memberof HistoryItems
     */
    'sessionId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HistoryItems
     */
    'documentType'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof HistoryItems
     */
    'isSuccessful'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof HistoryItems
     */
    'error'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HistoryItems
     */
    'client'?: string | null;
}
/**
 * 
 * @export
 * @interface NewSessionResponse
 */
export interface NewSessionResponse {
    /**
     * The ID of the session to use across multiple liveness check calls.
     * @type {string}
     * @memberof NewSessionResponse
     */
    'id'?: string | null;
    /**
     * The top of the nose-pointing rectangle in percent compared to the document\'s height.
     * @type {number}
     * @memberof NewSessionResponse
     */
    'noseBoundsTop'?: number;
    /**
     * The left of the nose-pointing rectangle in percent compared to the document\'s width.
     * @type {number}
     * @memberof NewSessionResponse
     */
    'noseBoundsLeft'?: number;
    /**
     * The width of the nose-pointing rectangle in percent compared to the document\'s width.
     * @type {number}
     * @memberof NewSessionResponse
     */
    'noseBoundsWidth'?: number;
    /**
     * The height of the nose-pointing rectangle in percent compared to the document\'s height.
     * @type {number}
     * @memberof NewSessionResponse
     */
    'noseBoundsHeight'?: number;
}
/**
 * 
 * @export
 * @interface S3DataRequest
 */
export interface S3DataRequest {
    /**
     * The ID of the request to use. To get the request ID, first call /data/request/create.
     * @type {string}
     * @memberof S3DataRequest
     */
    'requestId'?: string | null;
    /**
     * The key of the object in S3 that has been uploaded.
     * @type {string}
     * @memberof S3DataRequest
     */
    's3Key'?: string | null;
    /**
     * The document type. To make the current supported types, call /document/doctypes
     * @type {string}
     * @memberof S3DataRequest
     */
    'documentType'?: string | null;
}
/**
 * 
 * @export
 * @interface TrainingJob
 */
export interface TrainingJob {
    /**
     * 
     * @type {string}
     * @memberof TrainingJob
     */
    'id'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TrainingJob
     */
    'startTime'?: number;
    /**
     * 
     * @type {string}
     * @memberof TrainingJob
     */
    'status'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TrainingJob
     */
    'detailedStatus'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TrainingJob
     */
    'labellingJobArn'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof TrainingJob
     */
    'datasetCreated'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TrainingJob
     */
    'datasetArn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TrainingJob
     */
    'projectVersionArn'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TrainingJob
     */
    'projectArn'?: string | null;
}
/**
 * The response of a liveness verification request.
 * @export
 * @interface VerifyLivenessResponse
 */
export interface VerifyLivenessResponse {
    /**
     * If true, the document is verified as live.
     * @type {boolean}
     * @memberof VerifyLivenessResponse
     */
    'isLive'?: boolean;
    /**
     * The error message if liveness is false.
     * @type {string}
     * @memberof VerifyLivenessResponse
     */
    'error'?: string | null;
}

/**
 * DataApi - axios parameter creator
 * @export
 */
export const DataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the image of the person\'s face in Base64 format.
         * @summary Gets the faces in a document.
         * @param {S3DataRequest} [s3DataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataFacePost: async (s3DataRequest?: S3DataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/data/face`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(s3DataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets the field values from a document.
         * @param {S3DataRequest} [s3DataRequest] The field values detected on the document in a JSON object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataFieldsPost: async (s3DataRequest?: S3DataRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/data/fields`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(s3DataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the ID of the request to be used
         * @summary Creates a new data request for getting faces and field data.  This should be called first before trying to get faces or data from documents.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataRequestCreatePost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/data/request/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a presigned URL used for HTTP PUT requests to store assets for data requests.
         * @param {string} [requestId] 
         * @param {string} [s3Key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataUrlGet: async (requestId?: string, s3Key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/data/url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (requestId !== undefined) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (s3Key !== undefined) {
                localVarQueryParameter['s3Key'] = s3Key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataApi - functional programming interface
 * @export
 */
export const DataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the image of the person\'s face in Base64 format.
         * @summary Gets the faces in a document.
         * @param {S3DataRequest} [s3DataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataFacePost(s3DataRequest?: S3DataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFacesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataFacePost(s3DataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets the field values from a document.
         * @param {S3DataRequest} [s3DataRequest] The field values detected on the document in a JSON object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataFieldsPost(s3DataRequest?: S3DataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataFieldsPost(s3DataRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the ID of the request to be used
         * @summary Creates a new data request for getting faces and field data.  This should be called first before trying to get faces or data from documents.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataRequestCreatePost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDataRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataRequestCreatePost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a presigned URL used for HTTP PUT requests to store assets for data requests.
         * @param {string} [requestId] 
         * @param {string} [s3Key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDataUrlGet(requestId?: string, s3Key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDataUrlGet(requestId, s3Key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataApi - factory interface
 * @export
 */
export const DataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataApiFp(configuration)
    return {
        /**
         * Returns the image of the person\'s face in Base64 format.
         * @summary Gets the faces in a document.
         * @param {S3DataRequest} [s3DataRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataFacePost(s3DataRequest?: S3DataRequest, options?: any): AxiosPromise<GetFacesResponse> {
            return localVarFp.apiDataFacePost(s3DataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets the field values from a document.
         * @param {S3DataRequest} [s3DataRequest] The field values detected on the document in a JSON object.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataFieldsPost(s3DataRequest?: S3DataRequest, options?: any): AxiosPromise<string> {
            return localVarFp.apiDataFieldsPost(s3DataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the ID of the request to be used
         * @summary Creates a new data request for getting faces and field data.  This should be called first before trying to get faces or data from documents.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataRequestCreatePost(options?: any): AxiosPromise<CreateDataRequestResponse> {
            return localVarFp.apiDataRequestCreatePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a presigned URL used for HTTP PUT requests to store assets for data requests.
         * @param {string} [requestId] 
         * @param {string} [s3Key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDataUrlGet(requestId?: string, s3Key?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiDataUrlGet(requestId, s3Key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataApi - interface
 * @export
 * @interface DataApi
 */
export interface DataApiInterface {
    /**
     * Returns the image of the person\'s face in Base64 format.
     * @summary Gets the faces in a document.
     * @param {S3DataRequest} [s3DataRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    apiDataFacePost(s3DataRequest?: S3DataRequest, options?: AxiosRequestConfig): AxiosPromise<GetFacesResponse>;

    /**
     * 
     * @summary Gets the field values from a document.
     * @param {S3DataRequest} [s3DataRequest] The field values detected on the document in a JSON object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    apiDataFieldsPost(s3DataRequest?: S3DataRequest, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * Returns the ID of the request to be used
     * @summary Creates a new data request for getting faces and field data.  This should be called first before trying to get faces or data from documents.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    apiDataRequestCreatePost(options?: AxiosRequestConfig): AxiosPromise<CreateDataRequestResponse>;

    /**
     * 
     * @summary Returns a presigned URL used for HTTP PUT requests to store assets for data requests.
     * @param {string} [requestId] 
     * @param {string} [s3Key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApiInterface
     */
    apiDataUrlGet(requestId?: string, s3Key?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

}

/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
export class DataApi extends BaseAPI implements DataApiInterface {
    /**
     * Returns the image of the person\'s face in Base64 format.
     * @summary Gets the faces in a document.
     * @param {S3DataRequest} [s3DataRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiDataFacePost(s3DataRequest?: S3DataRequest, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiDataFacePost(s3DataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets the field values from a document.
     * @param {S3DataRequest} [s3DataRequest] The field values detected on the document in a JSON object.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiDataFieldsPost(s3DataRequest?: S3DataRequest, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiDataFieldsPost(s3DataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the ID of the request to be used
     * @summary Creates a new data request for getting faces and field data.  This should be called first before trying to get faces or data from documents.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiDataRequestCreatePost(options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiDataRequestCreatePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a presigned URL used for HTTP PUT requests to store assets for data requests.
     * @param {string} [requestId] 
     * @param {string} [s3Key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    public apiDataUrlGet(requestId?: string, s3Key?: string, options?: AxiosRequestConfig) {
        return DataApiFp(this.configuration).apiDataUrlGet(requestId, s3Key, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DocumentApi - axios parameter creator
 * @export
 */
export const DocumentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Gets the document types that are currently supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentDoctypesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/document/doctypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Detects the document type and sets the session document type.
         * @param {string} [sessionId] The ID of the session that this document belongs to.
         * @param {string} [s3Key] The key of the document that is stored in S3. This should be an image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentSetPost: async (sessionId?: string, s3Key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/document/set`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionId !== undefined) {
                localVarQueryParameter['sessionId'] = sessionId;
            }

            if (s3Key !== undefined) {
                localVarQueryParameter['s3Key'] = s3Key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Tries to detect the type of document from an image.
         * @param {string} [s3Key] The key of the object stored in S3. This should be an image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentTypePost: async (s3Key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/document/type`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (s3Key !== undefined) {
                localVarQueryParameter['s3Key'] = s3Key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentApi - functional programming interface
 * @export
 */
export const DocumentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Gets the document types that are currently supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentDoctypesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<{ [key: string]: any; }>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentDoctypesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Detects the document type and sets the session document type.
         * @param {string} [sessionId] The ID of the session that this document belongs to.
         * @param {string} [s3Key] The key of the document that is stored in S3. This should be an image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentSetPost(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentSetPost(sessionId, s3Key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Tries to detect the type of document from an image.
         * @param {string} [s3Key] The key of the object stored in S3. This should be an image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiDocumentTypePost(s3Key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiDocumentTypePost(s3Key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentApi - factory interface
 * @export
 */
export const DocumentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentApiFp(configuration)
    return {
        /**
         * 
         * @summary Gets the document types that are currently supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentDoctypesGet(options?: any): AxiosPromise<Array<{ [key: string]: any; }>> {
            return localVarFp.apiDocumentDoctypesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Detects the document type and sets the session document type.
         * @param {string} [sessionId] The ID of the session that this document belongs to.
         * @param {string} [s3Key] The key of the document that is stored in S3. This should be an image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentSetPost(sessionId?: string, s3Key?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiDocumentSetPost(sessionId, s3Key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Tries to detect the type of document from an image.
         * @param {string} [s3Key] The key of the object stored in S3. This should be an image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiDocumentTypePost(s3Key?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiDocumentTypePost(s3Key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentApi - interface
 * @export
 * @interface DocumentApi
 */
export interface DocumentApiInterface {
    /**
     * 
     * @summary Gets the document types that are currently supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiInterface
     */
    apiDocumentDoctypesGet(options?: AxiosRequestConfig): AxiosPromise<Array<{ [key: string]: any; }>>;

    /**
     * 
     * @summary Detects the document type and sets the session document type.
     * @param {string} [sessionId] The ID of the session that this document belongs to.
     * @param {string} [s3Key] The key of the document that is stored in S3. This should be an image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiInterface
     */
    apiDocumentSetPost(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @summary Tries to detect the type of document from an image.
     * @param {string} [s3Key] The key of the object stored in S3. This should be an image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApiInterface
     */
    apiDocumentTypePost(s3Key?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

}

/**
 * DocumentApi - object-oriented interface
 * @export
 * @class DocumentApi
 * @extends {BaseAPI}
 */
export class DocumentApi extends BaseAPI implements DocumentApiInterface {
    /**
     * 
     * @summary Gets the document types that are currently supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApi
     */
    public apiDocumentDoctypesGet(options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).apiDocumentDoctypesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Detects the document type and sets the session document type.
     * @param {string} [sessionId] The ID of the session that this document belongs to.
     * @param {string} [s3Key] The key of the document that is stored in S3. This should be an image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApi
     */
    public apiDocumentSetPost(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).apiDocumentSetPost(sessionId, s3Key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Tries to detect the type of document from an image.
     * @param {string} [s3Key] The key of the object stored in S3. This should be an image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentApi
     */
    public apiDocumentTypePost(s3Key?: string, options?: AxiosRequestConfig) {
        return DocumentApiFp(this.configuration).apiDocumentTypePost(s3Key, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * LivenessApi - axios parameter creator
 * @export
 */
export const LivenessApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Verify the liveness of a person for a document. All the images including document, selfie, nose pointing and eyes  closed should already have been submitted before calling this.
         * @param {string} [sessionId] The ID of the session to be processed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLivenessVerifyGet: async (sessionId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/liveness/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionId !== undefined) {
                localVarQueryParameter['sessionId'] = sessionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LivenessApi - functional programming interface
 * @export
 */
export const LivenessApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LivenessApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Verify the liveness of a person for a document. All the images including document, selfie, nose pointing and eyes  closed should already have been submitted before calling this.
         * @param {string} [sessionId] The ID of the session to be processed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLivenessVerifyGet(sessionId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerifyLivenessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLivenessVerifyGet(sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LivenessApi - factory interface
 * @export
 */
export const LivenessApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LivenessApiFp(configuration)
    return {
        /**
         * 
         * @summary Verify the liveness of a person for a document. All the images including document, selfie, nose pointing and eyes  closed should already have been submitted before calling this.
         * @param {string} [sessionId] The ID of the session to be processed.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLivenessVerifyGet(sessionId?: string, options?: any): AxiosPromise<VerifyLivenessResponse> {
            return localVarFp.apiLivenessVerifyGet(sessionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LivenessApi - interface
 * @export
 * @interface LivenessApi
 */
export interface LivenessApiInterface {
    /**
     * 
     * @summary Verify the liveness of a person for a document. All the images including document, selfie, nose pointing and eyes  closed should already have been submitted before calling this.
     * @param {string} [sessionId] The ID of the session to be processed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivenessApiInterface
     */
    apiLivenessVerifyGet(sessionId?: string, options?: AxiosRequestConfig): AxiosPromise<VerifyLivenessResponse>;

}

/**
 * LivenessApi - object-oriented interface
 * @export
 * @class LivenessApi
 * @extends {BaseAPI}
 */
export class LivenessApi extends BaseAPI implements LivenessApiInterface {
    /**
     * 
     * @summary Verify the liveness of a person for a document. All the images including document, selfie, nose pointing and eyes  closed should already have been submitted before calling this.
     * @param {string} [sessionId] The ID of the session to be processed.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LivenessApi
     */
    public apiLivenessVerifyGet(sessionId?: string, options?: AxiosRequestConfig) {
        return LivenessApiFp(this.configuration).apiLivenessVerifyGet(sessionId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SessionApi - axios parameter creator
 * @export
 */
export const SessionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [sessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionComparePost: async (sessionId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session/compare`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionId !== undefined) {
                localVarQueryParameter['sessionId'] = sessionId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submits a document for liveness verification.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] The s3 key where the document has been uploaded.
         * @param {string} [expectedDocumentType] The type of document that has been uploaded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionDocumentPost: async (sessionId?: string, s3Key?: string, expectedDocumentType?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session/document`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionId !== undefined) {
                localVarQueryParameter['sessionId'] = sessionId;
            }

            if (s3Key !== undefined) {
                localVarQueryParameter['s3Key'] = s3Key;
            }

            if (expectedDocumentType !== undefined) {
                localVarQueryParameter['expectedDocumentType'] = expectedDocumentType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submits the eyes closed image for liveness verification.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] The key of the image stored in S3.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionEyesclosedPost: async (sessionId?: string, s3Key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session/eyesclosed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionId !== undefined) {
                localVarQueryParameter['sessionId'] = sessionId;
            }

            if (s3Key !== undefined) {
                localVarQueryParameter['s3Key'] = s3Key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Starts a new session for liveness checking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionNewPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session/new`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submits a nose pointing image for liveness verification.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] The key of the image stored in S3.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionNosepointPost: async (sessionId?: string, s3Key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session/nosepoint`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionId !== undefined) {
                localVarQueryParameter['sessionId'] = sessionId;
            }

            if (s3Key !== undefined) {
                localVarQueryParameter['s3Key'] = s3Key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Submit a selfie image for liveness checking.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] The key of the selfie stored in S3. Must be a valid image of a person with eyes open.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionSelfiePost: async (sessionId?: string, s3Key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session/selfie`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionId !== undefined) {
                localVarQueryParameter['sessionId'] = sessionId;
            }

            if (s3Key !== undefined) {
                localVarQueryParameter['s3Key'] = s3Key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Gets a presigned URL to allow uploads using the HTTP PUT verb.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionUrlGet: async (sessionId?: string, s3Key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/session/url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sessionId !== undefined) {
                localVarQueryParameter['sessionId'] = sessionId;
            }

            if (s3Key !== undefined) {
                localVarQueryParameter['s3Key'] = s3Key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionApi - functional programming interface
 * @export
 */
export const SessionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SessionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [sessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionComparePost(sessionId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompareDocumentWithSelfie>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionComparePost(sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Submits a document for liveness verification.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] The s3 key where the document has been uploaded.
         * @param {string} [expectedDocumentType] The type of document that has been uploaded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionDocumentPost(sessionId?: string, s3Key?: string, expectedDocumentType?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionDocumentPost(sessionId, s3Key, expectedDocumentType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Submits the eyes closed image for liveness verification.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] The key of the image stored in S3.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionEyesclosedPost(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionEyesclosedPost(sessionId, s3Key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Starts a new session for liveness checking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionNewPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewSessionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionNewPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Submits a nose pointing image for liveness verification.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] The key of the image stored in S3.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionNosepointPost(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionNosepointPost(sessionId, s3Key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Submit a selfie image for liveness checking.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] The key of the selfie stored in S3. Must be a valid image of a person with eyes open.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionSelfiePost(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionSelfiePost(sessionId, s3Key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Gets a presigned URL to allow uploads using the HTTP PUT verb.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSessionUrlGet(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSessionUrlGet(sessionId, s3Key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SessionApi - factory interface
 * @export
 */
export const SessionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SessionApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [sessionId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionComparePost(sessionId?: string, options?: any): AxiosPromise<CompareDocumentWithSelfie> {
            return localVarFp.apiSessionComparePost(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submits a document for liveness verification.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] The s3 key where the document has been uploaded.
         * @param {string} [expectedDocumentType] The type of document that has been uploaded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionDocumentPost(sessionId?: string, s3Key?: string, expectedDocumentType?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiSessionDocumentPost(sessionId, s3Key, expectedDocumentType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submits the eyes closed image for liveness verification.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] The key of the image stored in S3.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionEyesclosedPost(sessionId?: string, s3Key?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiSessionEyesclosedPost(sessionId, s3Key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Starts a new session for liveness checking.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionNewPost(options?: any): AxiosPromise<NewSessionResponse> {
            return localVarFp.apiSessionNewPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submits a nose pointing image for liveness verification.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] The key of the image stored in S3.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionNosepointPost(sessionId?: string, s3Key?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiSessionNosepointPost(sessionId, s3Key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Submit a selfie image for liveness checking.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] The key of the selfie stored in S3. Must be a valid image of a person with eyes open.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionSelfiePost(sessionId?: string, s3Key?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiSessionSelfiePost(sessionId, s3Key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Gets a presigned URL to allow uploads using the HTTP PUT verb.
         * @param {string} [sessionId] The session ID that is being used across multiple requests.
         * @param {string} [s3Key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSessionUrlGet(sessionId?: string, s3Key?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiSessionUrlGet(sessionId, s3Key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SessionApi - interface
 * @export
 * @interface SessionApi
 */
export interface SessionApiInterface {
    /**
     * 
     * @param {string} [sessionId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    apiSessionComparePost(sessionId?: string, options?: AxiosRequestConfig): AxiosPromise<CompareDocumentWithSelfie>;

    /**
     * 
     * @summary Submits a document for liveness verification.
     * @param {string} [sessionId] The session ID that is being used across multiple requests.
     * @param {string} [s3Key] The s3 key where the document has been uploaded.
     * @param {string} [expectedDocumentType] The type of document that has been uploaded.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    apiSessionDocumentPost(sessionId?: string, s3Key?: string, expectedDocumentType?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Submits the eyes closed image for liveness verification.
     * @param {string} [sessionId] The session ID that is being used across multiple requests.
     * @param {string} [s3Key] The key of the image stored in S3.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    apiSessionEyesclosedPost(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Starts a new session for liveness checking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    apiSessionNewPost(options?: AxiosRequestConfig): AxiosPromise<NewSessionResponse>;

    /**
     * 
     * @summary Submits a nose pointing image for liveness verification.
     * @param {string} [sessionId] The session ID that is being used across multiple requests.
     * @param {string} [s3Key] The key of the image stored in S3.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    apiSessionNosepointPost(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Submit a selfie image for liveness checking.
     * @param {string} [sessionId] The session ID that is being used across multiple requests.
     * @param {string} [s3Key] The key of the selfie stored in S3. Must be a valid image of a person with eyes open.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    apiSessionSelfiePost(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Gets a presigned URL to allow uploads using the HTTP PUT verb.
     * @param {string} [sessionId] The session ID that is being used across multiple requests.
     * @param {string} [s3Key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    apiSessionUrlGet(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

}

/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
export class SessionApi extends BaseAPI implements SessionApiInterface {
    /**
     * 
     * @param {string} [sessionId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public apiSessionComparePost(sessionId?: string, options?: AxiosRequestConfig) {
        return SessionApiFp(this.configuration).apiSessionComparePost(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submits a document for liveness verification.
     * @param {string} [sessionId] The session ID that is being used across multiple requests.
     * @param {string} [s3Key] The s3 key where the document has been uploaded.
     * @param {string} [expectedDocumentType] The type of document that has been uploaded.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public apiSessionDocumentPost(sessionId?: string, s3Key?: string, expectedDocumentType?: string, options?: AxiosRequestConfig) {
        return SessionApiFp(this.configuration).apiSessionDocumentPost(sessionId, s3Key, expectedDocumentType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submits the eyes closed image for liveness verification.
     * @param {string} [sessionId] The session ID that is being used across multiple requests.
     * @param {string} [s3Key] The key of the image stored in S3.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public apiSessionEyesclosedPost(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig) {
        return SessionApiFp(this.configuration).apiSessionEyesclosedPost(sessionId, s3Key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Starts a new session for liveness checking.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public apiSessionNewPost(options?: AxiosRequestConfig) {
        return SessionApiFp(this.configuration).apiSessionNewPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submits a nose pointing image for liveness verification.
     * @param {string} [sessionId] The session ID that is being used across multiple requests.
     * @param {string} [s3Key] The key of the image stored in S3.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public apiSessionNosepointPost(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig) {
        return SessionApiFp(this.configuration).apiSessionNosepointPost(sessionId, s3Key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Submit a selfie image for liveness checking.
     * @param {string} [sessionId] The session ID that is being used across multiple requests.
     * @param {string} [s3Key] The key of the selfie stored in S3. Must be a valid image of a person with eyes open.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public apiSessionSelfiePost(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig) {
        return SessionApiFp(this.configuration).apiSessionSelfiePost(sessionId, s3Key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Gets a presigned URL to allow uploads using the HTTP PUT verb.
     * @param {string} [sessionId] The session ID that is being used across multiple requests.
     * @param {string} [s3Key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public apiSessionUrlGet(sessionId?: string, s3Key?: string, options?: AxiosRequestConfig) {
        return SessionApiFp(this.configuration).apiSessionUrlGet(sessionId, s3Key, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TrainingApi - axios parameter creator
 * @export
 */
export const TrainingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Creates a new training job. Use the training job ID to access other methods for training.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTrainingCreatePost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/training/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a list of training jobs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTrainingListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/training/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Creates a new labelling job based on the images in the S3 bucket.
         * @param {string} [jobId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTrainingStartPost: async (jobId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/training/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobId !== undefined) {
                localVarQueryParameter['JobId'] = jobId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns a presigned URL to upload files for training.
         * @param {string} [jobId] 
         * @param {string} [s3Key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTrainingUrlGet: async (jobId?: string, s3Key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/training/url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobId !== undefined) {
                localVarQueryParameter['JobId'] = jobId;
            }

            if (s3Key !== undefined) {
                localVarQueryParameter['S3Key'] = s3Key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrainingApi - functional programming interface
 * @export
 */
export const TrainingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrainingApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Creates a new training job. Use the training job ID to access other methods for training.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTrainingCreatePost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrainingJob>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTrainingCreatePost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a list of training jobs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTrainingListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TrainingJob>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTrainingListGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Creates a new labelling job based on the images in the S3 bucket.
         * @param {string} [jobId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTrainingStartPost(jobId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTrainingStartPost(jobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns a presigned URL to upload files for training.
         * @param {string} [jobId] 
         * @param {string} [s3Key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTrainingUrlGet(jobId?: string, s3Key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTrainingUrlGet(jobId, s3Key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrainingApi - factory interface
 * @export
 */
export const TrainingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrainingApiFp(configuration)
    return {
        /**
         * 
         * @summary Creates a new training job. Use the training job ID to access other methods for training.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTrainingCreatePost(options?: any): AxiosPromise<TrainingJob> {
            return localVarFp.apiTrainingCreatePost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a list of training jobs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTrainingListGet(options?: any): AxiosPromise<Array<TrainingJob>> {
            return localVarFp.apiTrainingListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Creates a new labelling job based on the images in the S3 bucket.
         * @param {string} [jobId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTrainingStartPost(jobId?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiTrainingStartPost(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns a presigned URL to upload files for training.
         * @param {string} [jobId] 
         * @param {string} [s3Key] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTrainingUrlGet(jobId?: string, s3Key?: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiTrainingUrlGet(jobId, s3Key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TrainingApi - interface
 * @export
 * @interface TrainingApi
 */
export interface TrainingApiInterface {
    /**
     * 
     * @summary Creates a new training job. Use the training job ID to access other methods for training.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiInterface
     */
    apiTrainingCreatePost(options?: AxiosRequestConfig): AxiosPromise<TrainingJob>;

    /**
     * 
     * @summary Returns a list of training jobs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiInterface
     */
    apiTrainingListGet(options?: AxiosRequestConfig): AxiosPromise<Array<TrainingJob>>;

    /**
     * 
     * @summary Creates a new labelling job based on the images in the S3 bucket.
     * @param {string} [jobId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiInterface
     */
    apiTrainingStartPost(jobId?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

    /**
     * 
     * @summary Returns a presigned URL to upload files for training.
     * @param {string} [jobId] 
     * @param {string} [s3Key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApiInterface
     */
    apiTrainingUrlGet(jobId?: string, s3Key?: string, options?: AxiosRequestConfig): AxiosPromise<string>;

}

/**
 * TrainingApi - object-oriented interface
 * @export
 * @class TrainingApi
 * @extends {BaseAPI}
 */
export class TrainingApi extends BaseAPI implements TrainingApiInterface {
    /**
     * 
     * @summary Creates a new training job. Use the training job ID to access other methods for training.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiTrainingCreatePost(options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiTrainingCreatePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a list of training jobs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiTrainingListGet(options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiTrainingListGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Creates a new labelling job based on the images in the S3 bucket.
     * @param {string} [jobId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiTrainingStartPost(jobId?: string, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiTrainingStartPost(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns a presigned URL to upload files for training.
     * @param {string} [jobId] 
     * @param {string} [s3Key] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrainingApi
     */
    public apiTrainingUrlGet(jobId?: string, s3Key?: string, options?: AxiosRequestConfig) {
        return TrainingApiFp(this.configuration).apiTrainingUrlGet(jobId, s3Key, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * VerificationHistoryApi - axios parameter creator
 * @export
 */
export const VerificationHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHistoryGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VerificationHistoryApi - functional programming interface
 * @export
 */
export const VerificationHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VerificationHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiHistoryGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryItems>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiHistoryGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VerificationHistoryApi - factory interface
 * @export
 */
export const VerificationHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VerificationHistoryApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiHistoryGet(options?: any): AxiosPromise<Array<HistoryItems>> {
            return localVarFp.apiHistoryGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VerificationHistoryApi - interface
 * @export
 * @interface VerificationHistoryApi
 */
export interface VerificationHistoryApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationHistoryApiInterface
     */
    apiHistoryGet(options?: AxiosRequestConfig): AxiosPromise<Array<HistoryItems>>;

}

/**
 * VerificationHistoryApi - object-oriented interface
 * @export
 * @class VerificationHistoryApi
 * @extends {BaseAPI}
 */
export class VerificationHistoryApi extends BaseAPI implements VerificationHistoryApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VerificationHistoryApi
     */
    public apiHistoryGet(options?: AxiosRequestConfig) {
        return VerificationHistoryApiFp(this.configuration).apiHistoryGet(options).then((request) => request(this.axios, this.basePath));
    }
}



